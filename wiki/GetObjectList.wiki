#summary Sample using GetObjectList.

== Returns a paginated list of issues. By default, page size is 25 and it returns open issues only.==

Maximum size for page size is 100.

=== Parameters ===
 * offset: skip this number of issues in response (optional)
 * limit: number of issues per page (optional)
 * sort: column to sort with. Append :desc to invert the order.

 * page: page number (optional) You can used instead of "offset" and "limit"

=== Optional filters ===

 * project_id: get issues from the project with the given id, where id is either project id or project identifier

 * tracker_id: get issues from the tracker with the given id

 * status_id: get issues with the given status id only. Possible values:    open, closed, {{{*}}} to get open and closed issues, status id

 * assigned_to_id: get issues which are assigned to the given user id

 * cf_x: get issues with the given value for custom field with an ID of x. (Custom field must have 'used as a filter' checked.)

 * ...

=== Example ===

{{{
using System;
using System.Collections.Specialized;
using Redmine.Net.Api;
using Redmine.Net.Api.Types;

namespace RedmineTest
{
    class Program
    {
        static void Main(string[] args)
        {
            string host = "";
            string apiKey = "";

            var manager = new RedmineManager(host, apiKey);

            var parameters = new NameValueCollection {{"status_id", "*"}};
            foreach (var issue in manager.GetObjectList<Issue>(parameters))
            {
                Console.WriteLine("#{0}: {1}", issue.Id, issue.Subject);
            }
        }
    }
}

}}}